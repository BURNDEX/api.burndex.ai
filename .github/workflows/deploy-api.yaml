on:
  push:
    branches:
      - main

name: Deploy BURNDEX API
jobs:
  build:
    name: Build and Push Container to AWS ECR
    runs-on: ubuntu-latest
    outputs:
      ecr_registry: ${{ steps.login-ecr.outputs.registry }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
  
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: bx-api
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
  
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to DigitalOcean
        uses: appleboy/ssh-action@master
        env:
          AWS_ACCESS: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          AWS_REGISTRY: ${{ needs.build.outputs.ecr_registry }}
          IMAGE: bx-api
        with:
          host: ${{ secrets.DO_HOST}}
          username: ${{ secrets.DO_USERNAME }}
          key: ${{ secrets.DO_KEY }}
          passphrase: ${{ secrets.DO_PASSPHRASE }}
          envs: AWS_ACCESS, AWS_SECRET, AWS_REGION, AWS_REGISTRY, IMAGE
          script: |
            # Logon to AWS ECR
            aws ecr get-login-password --region $(echo $AWS_REGION) | docker login --username AWS --password-stdin $(echo $AWS_REGISTRY)

            # Stop current container
            docker stop $(echo $IMAGE)

            # Remove container
            docker rm $(echo $IMAGE)

            # Pull new image
            docker pull $(echo $AWS_REGISTRY)/$(echo $IMAGE):latest

            # Run new container
            docker run -d \
            --restart always \
            -p 15782:15782 \
            --name $IMAGE \
            $(echo $AWS_REGISTRY)/$(echo $IMAGE):latest